TWILIO_ACCOUNT_SID=your_account_sid
TWILIO_AUTH_TOKEN=your_auth_token
TWILIO_PHONE_NUMBER=your_twilio_number
ADMIN_EMAIL=admin@example.com
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_email_password

const mongoose = require('mongoose');

const branchSchema = new mongoose.Schema({
    id: { type: String, required: true },
    name: String,
    location: {
        address: String,
        city: String,
        latitude: Number,
        longitude: Number
    },
    menu: [{
        id: String,
        name: String,
        price: Number
    }],
    capacity: {
        maxOrders: Number,
        currentLoad: Number
    },
    status: { type: String, enum: ['active', 'inactive', 'maintenance'], default: 'active' }
});

module.exports = mongoose.model('Branch', branchSchema);

const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
    id: String,
    branchId: String,
    userId: String,
    items: [{ menuItemId: String, quantity: Number, price: Number }],
    totalAmount: Number,
    paymentMethod: { type: String, enum: ['cash', 'card', 'online'] },
    paymentStatus: { type: String, enum: ['pending', 'paid'], default: 'pending' },
    orderStatus: { type: String, enum: ['pending', 'confirmed', 'completed'], default: 'pending' },
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Order', orderSchema);

const mongoose = require('mongoose');

const financeSchema = new mongoose.Schema({
    branchId: String,
    date: Date,
    totalRevenue: Number,
    cashReceived: Number
});

module.exports = mongoose.model('Finance', financeSchema);

const mongoose = require('mongoose');

const complaintSchema = new mongoose.Schema({
    branchId: String,
    customerId: String,
    customerPhone: String,
    customerEmail: String,
    message: String,
    status: { type: String, enum: ['pending', 'resolved'], default: 'pending' },
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Complaint', complaintSchema const Order = require('../models/Order');
const Finance = require('../models/Finance');

class OrderController {
    async placeOrder(req, res) {
        try {
            const { branchId, userId, items, totalAmount, paymentMethod } = req.body;

            const order = await Order.create({
                branchId,
                userId,
                items,
                totalAmount,
                paymentMethod,
                paymentStatus: paymentMethod === 'cash' ? 'pending' : 'paid'
            });

            res.status(201).json({ message: 'Order placed successfully', order });
        } catch (error) {
            res.status(500).json({ error: 'Failed to place order' });
        }
    }
}

module.exports = OrderController;);

const twilio = require('twilio');
const nodemailer = require('nodemailer');
const Complaint = require('../models/Complaint');

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

class ComplaintController {
    async registerComplaint(req, res) {
        try {
            const { branchId, customerPhone, customerEmail, message } = req.body;

            const complaint = await Complaint.create({
                branchId,
                customerPhone,
                customerEmail,
                message
            });

            await client.messages.create({
                body: `🚨 شکایت جدید از شعبه ${branchId}: ${message}`,
                from: process.env.TWILIO_PHONE_NUMBER,
                to: '+31612345678'
            });

            res.status(201).json({ message: 'Complaint registered' });
        } catch (error) {
            res.status(500).json({ error: 'Failed to register complaint' });
        }
    }
}

module.exports = ComplaintController;

require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/restaurant', { useNewUrlParser: true, useUnifiedTopology: true });

const OrderController = require('./controllers/OrderController');
const ComplaintController = require('./controllers/ComplaintController');

app.post('/api/orders', (req, res) => new OrderController().placeOrder(req, res));
app.post('/api/complaints', (req, res) => new ComplaintController().registerComplaint(req, res));

app.listen(3000, () => console.log('Server running on port 3000'));

<form id="complaintForm">
    <label>ایمیل:</label>
    <input type="email" id="customerEmail" required>
    
    <label>شماره تلفن:</label>
    <input type="tel" id="customerPhone" required>

    <label>پیام:</label>
    <textarea id="message" required></textarea>

    <button type="submit">ارسال شکایت</button>
</form>

<script>
    document.getElementById("complaintForm").addEventListener("submit", async function(event) {
        event.preventDefault();

        const response = await fetch("/api/complaints", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                customerEmail: document.getElementById("customerEmail").value,
                customerPhone: document.getElementById("customerPhone").value,
                message: document.getElementById("message").value
            })
        });

        const result = await response.json();
        alert(result.message);
    });
</script>


